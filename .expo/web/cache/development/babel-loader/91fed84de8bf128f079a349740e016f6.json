{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/bryanmarin/Desktop/Traffic-Stop-App/trafficstop/src/screens/NewPassword.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { Button, Input } from 'react-native-elements';\nimport colors from \"../styles/colors\";\nimport baseStyles from \"./styles/AuthenticationBoilerplate\";\nimport styles from \"./styles/ForgotPassword\";\nimport InputField from \"../common-components/InputField\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as ActionCreators from \"../redux/actions\";\nimport Amplify from '@aws-amplify/core';\nimport { Auth } from 'aws-amplify';\n\nvar ForgotPassword = function (_React$Component) {\n  _inherits(ForgotPassword, _React$Component);\n\n  var _super = _createSuper(ForgotPassword);\n\n  function ForgotPassword(props) {\n    var _this;\n\n    _classCallCheck(this, ForgotPassword);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      emailAddress: '',\n      password: '',\n      badgeNumber: '',\n      username: '',\n      code: '',\n      validPassword: false\n    };\n    _this.handlePasswordChange = _this.handlePasswordChange.bind(_assertThisInitialized(_this));\n    _this.handleNextButton = _this.handleNextButton.bind(_assertThisInitialized(_this));\n    _this.handleCodeChange = _this.handleCodeChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ForgotPassword, [{\n    key: \"handleSignInButton\",\n    value: function handleSignInButton() {\n      this.props.setLoggedIn(true);\n    }\n  }, {\n    key: \"handlePasswordChange\",\n    value: function handlePasswordChange(text) {\n      var strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\n      text.match(strongRegex) ? this.setState({\n        validPassword: true\n      }) : this.setState({\n        validPassword: false\n      });\n      this.setState({\n        password: text\n      });\n    }\n  }, {\n    key: \"handleCodeChange\",\n    value: function handleCodeChange(text) {\n      this.setState({\n        code: text\n      });\n    }\n  }, {\n    key: \"handleNextButton\",\n    value: function handleNextButton() {\n      this.props.setUserType('police');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var userType = this.props.userType;\n      var validPassword = this.state.validPassword;\n      return React.createElement(KeyboardAvoidingView, {\n        style: [{\n          backgroundColor: colors.background\n        }, baseStyles.wrapper],\n        behavior: \"padding\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: baseStyles.headerText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }\n      }, \"Let's get your password reset\"), React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.forgotPasswordSubheading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }, \"You have been texted or emailed a confirmation code, please enter it below\"), React.createElement(InputField, {\n        labelText: \"Confirmation Code\",\n        labelTextSize: 14,\n        labelColor: colors.white,\n        textColor: colors.white,\n        borderBottomColor: colors.white,\n        inputType: \"text\",\n        customStyle: {\n          marginBottom: 30\n        },\n        onChangeText: this.handleCodeChange,\n        autoCapitalize: \"none\",\n        iconName: \"key\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }\n      }), React.createElement(InputField, {\n        labelText: \"Password\",\n        labelTextSize: 14,\n        labelColor: colors.white,\n        textColor: colors.white,\n        borderBottomColor: colors.white,\n        inputType: \"password\",\n        customStyle: {\n          marginBottom: 30\n        },\n        onChangeText: this.handlePasswordChange,\n        showCheckmark: this.state.validPassword,\n        autoCapitalize: \"none\",\n        iconName: \"key\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: baseStyles.nextButtonSyle,\n        title: \"Submit\",\n        onPress: this.signIn,\n        disabled: !validPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: _extends({}, baseStyles.nextButtonText, {\n          color: validPassword ? colors.white : colors.secondaryText\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }\n      }, \" Finish \"), React.createElement(Icon, {\n        name: \"angle-right\",\n        color: validPassword ? colors.white : colors.secondaryText,\n        size: 22,\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return ForgotPassword;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userType: state.userType\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(ActionCreators, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);","map":{"version":3,"sources":["/Users/bryanmarin/Desktop/Traffic-Stop-App/trafficstop/src/screens/NewPassword.js"],"names":["React","Component","PropTypes","Icon","Button","Input","colors","baseStyles","styles","InputField","connect","bindActionCreators","ActionCreators","Amplify","Auth","ForgotPassword","props","state","emailAddress","password","badgeNumber","username","code","validPassword","handlePasswordChange","bind","handleNextButton","handleCodeChange","setLoggedIn","text","strongRegex","RegExp","match","setState","setUserType","userType","backgroundColor","background","wrapper","headerText","forgotPasswordSubheading","white","marginBottom","nextButtonSyle","signIn","nextButtonText","color","secondaryText","icon","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {\n  View,\n  Text,\n  ScrollView,\n  KeyboardAvoidingView,\n  Modal,\n  TouchableOpacity,\n  TouchableHighlight,\n} from 'react-native';\nimport { Button, Input } from 'react-native-elements';\nimport colors from '../styles/colors';\nimport baseStyles from './styles/AuthenticationBoilerplate';\nimport styles from './styles/ForgotPassword';\nimport InputField from '../common-components/InputField';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as ActionCreators from '../redux/actions';\n// import transparentHeaderStyle from '../styles/navigation';\n// import NavBarButton from '../components/buttons/NavBarButton';\n//import Loader from '../components/Loader';\n\n\nimport Amplify from '@aws-amplify/core'\nimport { Auth } from 'aws-amplify';\n//import awsconfig from '../../aws-exports';\n//Amplify.configure(awsconfig);\n\nclass ForgotPassword extends React.Component {\n  // static navigationOptions = ({ navigation }) => ({\n  //   headerTitle: \"\",\n  //   headerRight: () => <NavBarButton\n  //     handleButtonPress={() => navigation.navigate('ForgotPassword')}\n  //     location=\"right\"\n  //     color={colors.white}\n  //     text=\"Forgot Password\"\n  //   />,\n  //   headerLeft: () => <NavBarButton\n  //     handleButtonPress={() => navigation.goBack()}\n  //     location=\"left\"\n  //     icon={<Icon name=\"angle-left\" color={colors.white} size={30} />}\n  //   />,\n  //   headerStyle: transparentHeaderStyle,\n  //   headerTransparent: true,\n  //   headerTintColor: colors.white,\n  // });\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailAddress: '',\n      password: '',\n      badgeNumber: '',\n      username: '',\n      code: '',\n      validPassword: false,\n    };\n\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleNextButton = this.handleNextButton.bind(this);\n    this.handleCodeChange = this.handleCodeChange.bind(this);\n    //this.handleConfirmationCode = this.handleConfirmationCode.bind(this)\n  }\n\n\n  // handleConfirmationCode = () => {\n  //   const { emailAddress, confirmationCode } = this.state;\n  //   this.setState({ emailAddress: emailAddress.toLowerCase() })\n  //   Auth.confirmSignUp(emailAddress, confirmationCode, {})\n  //     .then(() => {\n  //       this.setState({ modalVisible: false });\n  //       this.props.navigation.navigate('Profile')\n  //     })\n  //     .catch(err => console.log(err));\n  // }\n\n  // async SignIn() {\n  //   const { logIn, navigation } = this.props;\n  //   const { navigate } = navigation;\n  //   const { emailAddress, password } = this.state;\n  //   this.setState({ emailAddress: emailAddress.toLowerCase() })\n  //   try {\n  //     const user = await Auth.signIn(emailAddress, password);\n  //     console.log(user)\n  //     if (user.challengeName === 'SMS_MFA' ||\n  //       user.challengeName === 'SOFTWARE_TOKEN_MFA') {\n  //       // You need to get the code from the UI inputs\n  //       // and then trigger the following function with a button click\n  //       //const code = getCodeFromUserInput();\n  //       // If MFA is enabled, sign-in should be confirmed with the confirmation code\n  //       this.setState({ modalVisible: true })\n  //     } else if (user.challengeName === 'NEW_PASSWORD_REQUIRED') {\n  //       // const {requiredAttributes} = user.challengeParam; // the array of required attributes, e.g ['email', 'phone_number']\n  //       // // You need to get the new password and required attributes from the UI inputs\n  //       // // and then trigger the following function with a button click\n  //       // // For example, the email and phone_number are required attributes\n  //       // const {emailAddress, password} = getInfoFromUserInput();\n  //       // const loggedUser = await Auth.completeNewPassword(\n  //       //     emailAddress,              // the Cognito User Object\n  //       //     newPassword,       // the new password\n  //       //     // OPTIONAL, the required attributes\n  //       //     {\n  //       //         name\n  //       //     }\n  //       // );\n  //     } else if (user.challengeName === 'MFA_SETUP') {\n  //       // This happens when the MFA method is TOTP\n  //       // The user needs to setup the TOTP before using it\n  //       // More info please check the Enabling MFA part\n  //       Auth.setupTOTP(user);\n  //     }\n  //     else {\n  //       //Auth.resendSignUp(emailAddress);\n  //       this.setState({ formValid: true, loadingVisible: false });\n  //       this.props.navigation.navigate('Profile');\n  //       // The user directly signs in\n  //       console.log(user);\n\n  //     }\n  //   } catch (err) {\n  //     console.log(err)\n  //     if (err.code === 'UserNotConfirmedException') {\n  //       // The error happens if the user didn't finish the confirmation step when signing up\n  //       // In this case you need to resend the code and confirm the user\n  //       // About how to resend the code and confirm the user, please check the signUp part\n  //       this.setState({ modalVisible: true });\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //     } else if (err.code === 'PasswordResetRequiredException') {\n  //       // The error happens when the password is reset in the Cognito console\n  //       // In this case you need to call forgotPassword to reset the password\n  //       // Please check the Forgot Password part.\n  //       Auth.forgotPassword(emailAddress);\n  //       this.props.navigation.navigate('ForgotPassword');\n  //     } else if (err.code === 'NotAuthorizedException') {\n  //       // The error happens when the incorrect password is provided\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //     } else if (err.code === 'UserNotFoundException') {\n  //       // The error happens when the supplied username/email does not exist in the Cognito user pool\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //     } else {\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //       console.log(err);\n  //     }\n  //   }\n  // }\n\n  handleSignInButton() {\n    //this.setState({ loadingVisible: true });\n    // const { logIn, navigation } = this.props;\n\n    // this.SignIn();\n    // setTimeout(() => {\n    //   const { emailAddress, password } = this.state;\n    //   this.setState({ emailAddress: emailAddress.toLowerCase() })\n    //   this.SignIn\n    // }, 2000);\n    this.props.setLoggedIn(true)\n  }\n\n\n  handlePasswordChange(text) {\n    var strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\n    text.match(strongRegex) ? this.setState({validPassword: true}): this.setState({validPassword: false});\n    this.setState({ password: text });\n  }\n\n  handleCodeChange(text) {\n    this.setState({ code: text });\n  }\n\n\n  handleNextButton() {\n    this.props.setUserType('police')\n  }\n\n  render() {\n    const userType = this.props.userType;\n    const {validPassword} = this.state\n    return (\n      <KeyboardAvoidingView\n        style={[{ backgroundColor: colors.background }, baseStyles.wrapper]}\n        behavior=\"padding\"\n      >\n            <Text style={baseStyles.headerText}>\n              Let's get your password reset\n            </Text>\n          <ScrollView>\n          <Text style={styles.forgotPasswordSubheading}>\n              You have been texted or emailed a confirmation code, please enter it below\n            </Text>\n            <InputField\n              labelText=\"Confirmation Code\"\n              labelTextSize={14}\n              labelColor={colors.white}\n              textColor={colors.white}\n              borderBottomColor={colors.white}\n              inputType=\"text\"\n              customStyle={{ marginBottom: 30 }}\n              onChangeText={this.handleCodeChange}\n              autoCapitalize={\"none\"}\n              iconName=\"key\"\n            />\n            <InputField\n              labelText=\"Password\"\n              labelTextSize={14}\n              labelColor={colors.white}\n              textColor={colors.white}\n              borderBottomColor={colors.white}\n              inputType=\"password\"\n              customStyle={{ marginBottom: 30 }}\n              onChangeText={this.handlePasswordChange}\n              showCheckmark = {this.state.validPassword}\n              autoCapitalize={\"none\"}\n              iconName=\"key\"\n            />\n            <TouchableOpacity \n              style = {baseStyles.nextButtonSyle}\n              title = {\"Submit\"}\n              onPress = {this.signIn}\n              disabled = {!validPassword}\n              >\n              <Text style= {\n                Object.assign({},\n                  baseStyles.nextButtonText, \n                  {color: validPassword? colors.white : colors.secondaryText})}\n                > Finish </Text>\n              <Icon\n              name=\"angle-right\"\n              color={validPassword? colors.white: colors.secondaryText}\n              size={22}\n              style={styles.icon}\n              />\n            </TouchableOpacity>\n          </ScrollView>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userType: state.userType,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(ActionCreators, dispatch);\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);\n"]},"metadata":{},"sourceType":"module"}