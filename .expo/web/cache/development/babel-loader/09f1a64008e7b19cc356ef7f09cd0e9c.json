{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/bryanmarin/Desktop/Traffic-Stop-App/trafficstop/src/common-components/InputField.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport colors from \"../styles/colors\";\nimport { FontAwesome as Icon } from '@expo/vector-icons';\n\nvar InputField = function (_Component) {\n  _inherits(InputField, _Component);\n\n  var _super = _createSuper(InputField);\n\n  function InputField(props) {\n    var _this;\n\n    _classCallCheck(this, InputField);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      inputValue: props.defaultValue,\n      scaleCheckmarkValue: new Animated.Value(0)\n    };\n    _this.onChangeText = _this.onChangeText.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(InputField, [{\n    key: \"scaleCheckmark\",\n    value: function scaleCheckmark(value) {\n      Animated.timing(this.state.scaleCheckmarkValue, {\n        toValue: value,\n        duration: 400,\n        easing: Easing.easeOutBack,\n        useNativeDriver: true\n      }).start();\n    }\n  }, {\n    key: \"onChangeText\",\n    value: function onChangeText(text) {\n      this.props.onChangeText(text);\n      this.setState({\n        inputValue: text\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          labelText = _this$props.labelText,\n          labelTextSize = _this$props.labelTextSize,\n          labelTextWeight = _this$props.labelTextWeight,\n          labelColor = _this$props.labelColor,\n          textColor = _this$props.textColor,\n          borderBottomColor = _this$props.borderBottomColor,\n          inputType = _this$props.inputType,\n          customStyle = _this$props.customStyle,\n          inputStyle = _this$props.inputStyle,\n          onChangeText = _this$props.onChangeText,\n          autoFocus = _this$props.autoFocus,\n          autoCapitalize = _this$props.autoCapitalize,\n          placeholder = _this$props.placeholder,\n          showCheckmark = _this$props.showCheckmark,\n          defaultValue = _this$props.defaultValue;\n      var _this$state = this.state,\n          inputValue = _this$state.inputValue,\n          scaleCheckmarkValue = _this$state.scaleCheckmarkValue;\n      var fontSize = labelTextSize || 14;\n      var fontWeight = labelTextWeight || '700';\n      var color = labelColor || colors.white;\n      var inputColor = textColor || colors.white;\n      var borderBottom = borderBottomColor || 'transparent';\n      var keyboardType = inputType === 'email' ? 'email-address' : 'default';\n      var customInputStyle = inputStyle || {};\n\n      if (!inputStyle || inputStyle && !inputStyle.paddingBottom) {\n        customInputStyle.paddingBottom = 5;\n      }\n\n      var iconScale = scaleCheckmarkValue.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0.01, 1.6, 1]\n      });\n      var scaleValue = showCheckmark ? 1 : 0;\n      this.scaleCheckmark(scaleValue);\n      return React.createElement(View, {\n        style: [customStyle, styles.wrapper],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: [{\n          fontWeight: fontWeight,\n          color: color,\n          fontSize: fontSize\n        }, styles.label],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, labelText), React.createElement(View, {\n        style: styles.inputFieldWithIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: [{\n          transform: [{\n            scale: iconScale\n          }]\n        }, styles.checkmarkWrapper],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, React.createElement(Icon, {\n        name: \"check\",\n        color: colors.white,\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      })), React.createElement(TextInput, {\n        style: [{\n          color: inputColor,\n          borderBottomColor: borderBottom\n        }, inputStyle, styles.inputField],\n        onChangeText: this.onChangeText,\n        keyboardType: keyboardType,\n        autoFocus: autoFocus,\n        autoCapitalize: autoCapitalize,\n        autoCorrect: false,\n        underlineColorAndroid: \"transparent\",\n        placeholder: placeholder,\n        defaultValue: inputValue,\n        value: inputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return InputField;\n}(Component);\n\nexport { InputField as default };\nInputField.propTypes = {\n  labelText: PropTypes.string.isRequired,\n  labelTextSize: PropTypes.number,\n  labelColor: PropTypes.string,\n  textColor: PropTypes.string,\n  borderBottomColor: PropTypes.string,\n  inputType: PropTypes.string.isRequired,\n  customStyle: PropTypes.object,\n  onChangeText: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  autoCapitalize: PropTypes.string,\n  labelTextWeight: PropTypes.string,\n  inputStyle: PropTypes.object,\n  showCheckmark: PropTypes.bool,\n  placeholder: PropTypes.string,\n  defaultValue: PropTypes.string\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    display: 'flex'\n  },\n  label: {\n    marginBottom: 20\n  },\n  showButton: {\n    position: 'absolute',\n    right: 0\n  },\n  showButtonText: {\n    color: colors.white,\n    fontWeight: '700'\n  },\n  inputFieldWithIcon: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center'\n  },\n  inputIcon: {\n    padding: 0,\n    color: colors.white\n  },\n  inputField: {\n    borderBottomWidth: 1,\n    paddingTop: 5,\n    flex: 1,\n    paddingRight: 10,\n    paddingBottom: 10,\n    marginLeft: 20\n  },\n  checkmarkWrapper: {\n    position: 'absolute',\n    right: 0,\n    bottom: 12\n  }\n});","map":{"version":3,"sources":["/Users/bryanmarin/Desktop/Traffic-Stop-App/trafficstop/src/common-components/InputField.js"],"names":["React","Component","PropTypes","colors","FontAwesome","Icon","InputField","props","state","inputValue","defaultValue","scaleCheckmarkValue","Animated","Value","onChangeText","bind","value","timing","toValue","duration","easing","Easing","easeOutBack","useNativeDriver","start","text","setState","labelText","labelTextSize","labelTextWeight","labelColor","textColor","borderBottomColor","inputType","customStyle","inputStyle","autoFocus","autoCapitalize","placeholder","showCheckmark","fontSize","fontWeight","color","white","inputColor","borderBottom","keyboardType","customInputStyle","paddingBottom","iconScale","interpolate","inputRange","outputRange","scaleValue","scaleCheckmark","styles","wrapper","label","inputFieldWithIcon","transform","scale","checkmarkWrapper","inputField","propTypes","string","isRequired","number","object","func","bool","StyleSheet","create","display","marginBottom","showButton","position","right","showButtonText","flex","flexDirection","justifyContent","inputIcon","padding","borderBottomWidth","paddingTop","paddingRight","marginLeft","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Animated,\n  Easing,\n} from 'react-native';\nimport colors from '../styles/colors';\nimport { FontAwesome as Icon } from '@expo/vector-icons';\n\n\nexport default class InputField extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: props.defaultValue,\n      scaleCheckmarkValue: new Animated.Value(0),\n    };\n    this.onChangeText = this.onChangeText.bind(this);\n  }\n\n  scaleCheckmark(value) {\n    Animated.timing(\n      this.state.scaleCheckmarkValue,\n      {\n        toValue: value,\n        duration: 400,\n        easing: Easing.easeOutBack,\n        useNativeDriver: true,\n      },\n    ).start();\n  }\n\n  onChangeText(text) {\n    this.props.onChangeText(text);\n    this.setState({ inputValue: text });\n  }\n\n  render() {\n    const {\n      labelText,\n      labelTextSize,\n      labelTextWeight,\n      labelColor,\n      textColor,\n      borderBottomColor,\n      inputType,\n      customStyle,\n      inputStyle,\n      onChangeText,\n      autoFocus,\n      autoCapitalize,\n      placeholder,\n      showCheckmark,\n      defaultValue,\n    } = this.props;\n    const { inputValue, scaleCheckmarkValue } = this.state;\n    const fontSize = labelTextSize || 14;\n    const fontWeight = labelTextWeight || '700';\n    const color = labelColor || colors.white;\n    const inputColor = textColor || colors.white;\n    const borderBottom = borderBottomColor || 'transparent';\n    const keyboardType = inputType === 'email' ? 'email-address' : 'default';\n    const customInputStyle = inputStyle || {};\n    if (!inputStyle || inputStyle && !inputStyle.paddingBottom) {\n      customInputStyle.paddingBottom = 5;\n    }\n\n    const iconScale = scaleCheckmarkValue.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [0.01, 1.6, 1],\n    });\n\n    const scaleValue = showCheckmark ? 1 : 0;\n    this.scaleCheckmark(scaleValue);\n\n    return (\n      <View style={[customStyle, styles.wrapper]}>\n        <Text style={[{ fontWeight, color, fontSize }, styles.label]}>\n          {labelText}\n        </Text>\n        <View style = {styles.inputFieldWithIcon}>\n        <Animated.View style={[{ transform: [{ scale: iconScale }] }, styles.checkmarkWrapper]}>\n          <Icon\n            name=\"check\"\n            color={colors.white}\n            size={20}\n          />\n        </Animated.View>\n          \n        <TextInput\n          style={[{ color: inputColor, borderBottomColor: borderBottom }, inputStyle, styles.inputField]}\n          onChangeText={this.onChangeText}\n          keyboardType={keyboardType}\n          autoFocus={autoFocus}\n          autoCapitalize={autoCapitalize}\n          autoCorrect={false}\n          underlineColorAndroid=\"transparent\"\n          placeholder={placeholder}\n          defaultValue={inputValue}\n          value={inputValue}\n        />\n        </View>\n      </View>\n    );\n  }\n}\n\nInputField.propTypes = {\n  labelText: PropTypes.string.isRequired,\n  labelTextSize: PropTypes.number,\n  labelColor: PropTypes.string,\n  textColor: PropTypes.string,\n  borderBottomColor: PropTypes.string,\n  inputType: PropTypes.string.isRequired,\n  customStyle: PropTypes.object,\n  onChangeText: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  autoCapitalize: PropTypes.string,\n  labelTextWeight: PropTypes.string,\n  inputStyle: PropTypes.object,\n  showCheckmark: PropTypes.bool,\n  placeholder: PropTypes.string,\n  defaultValue: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    display: 'flex',\n  },\n  label: {\n    marginBottom: 20,\n  },\n  showButton: {\n    position: 'absolute',\n    right: 0,\n  },\n  showButtonText: {\n    color: colors.white,\n    fontWeight: '700',\n  },\n  inputFieldWithIcon: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  inputIcon: {\n    padding: 0,\n    color: colors.white\n  },\n  inputField: {\n    borderBottomWidth: 1,\n    paddingTop: 5,\n    flex: 1,\n    paddingRight: 10,\n    paddingBottom: 10,\n    marginLeft: 20,\n},\n  checkmarkWrapper: {\n    position: 'absolute',\n    right: 0,\n    bottom: 12,\n  },\n});"]},"metadata":{},"sourceType":"module"}