{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/bryanmarin/Desktop/Traffic-Stop-App/trafficstop/src/screens/LogIn.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { Button, Input } from 'react-native-elements';\nimport colors from \"../styles/colors\";\nimport baseStyles from \"./styles/AuthenticationBoilerplate\";\nimport styles from \"./styles/LogIn\";\nimport InputField from \"../common-components/InputField\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as ActionCreators from \"../redux/actions\";\nimport Amplify from '@aws-amplify/core';\nimport { Auth } from 'aws-amplify';\n\nvar LogIn = function (_React$Component) {\n  _inherits(LogIn, _React$Component);\n\n  var _super = _createSuper(LogIn);\n\n  function LogIn(props) {\n    var _this;\n\n    _classCallCheck(this, LogIn);\n\n    _this = _super.call(this, props);\n\n    _this.signIn = function _callee() {\n      var _this$state, username, password;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, username = _this$state.username, password = _this$state.password;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Auth.signIn({\n                username: username,\n                password: password\n              }));\n\n            case 4:\n              console.log('successful signed in..');\n              console.log(_this.props);\n\n              _this.props.setLoggedIn(true);\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.log('error signing in...', _context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 9]], Promise);\n    };\n\n    _this.state = {\n      emailAddress: '',\n      password: '',\n      badgeNumber: '',\n      username: '',\n      confirmationCode: '',\n      validUsername: false,\n      validBadgenumber: false,\n      validPassword: false\n    };\n    _this.handleEmailChange = _this.handleEmailChange.bind(_assertThisInitialized(_this));\n    _this.handleBadgeChange = _this.handleBadgeChange.bind(_assertThisInitialized(_this));\n    _this.handleSignInButton = _this.handleSignInButton.bind(_assertThisInitialized(_this));\n    _this.handlePasswordChange = _this.handlePasswordChange.bind(_assertThisInitialized(_this));\n    _this.onCreatePoliceAccount = _this.onCreatePoliceAccount.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LogIn, [{\n    key: \"handleSignInButton\",\n    value: function handleSignInButton() {\n      this.props.setLoggedIn(true);\n    }\n  }, {\n    key: \"handleEmailChange\",\n    value: function handleEmailChange(text) {\n      var emailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n      this.setState({\n        emailAddress: text\n      });\n      this.setState({\n        username: text\n      });\n      text.match(emailformat) ? this.setState({\n        validEmail: true\n      }) : this.setState({\n        validEmail: false\n      });\n    }\n  }, {\n    key: \"handleBadgeChange\",\n    value: function handleBadgeChange(text) {\n      text.length >= 4 ? this.setState({\n        validBadgeNumber: true\n      }) : this.setState({\n        validBadgeNumber: false\n      });\n      this.setState({\n        badgeNumber: text\n      });\n    }\n  }, {\n    key: \"handlePasswordChange\",\n    value: function handlePasswordChange(text) {\n      var strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\n      text.match(strongRegex) ? this.setState({\n        validPassword: true\n      }) : this.setState({\n        validPassword: false\n      });\n      this.setState({\n        password: text\n      });\n    }\n  }, {\n    key: \"onCreatePoliceAccount\",\n    value: function onCreatePoliceAccount() {\n      this.props.navigation.navigate(\"Register\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var userType = this.props.userType;\n      var _this$state2 = this.state,\n          validEmail = _this$state2.validEmail,\n          validBadgenumber = _this$state2.validBadgenumber,\n          validPassword = _this$state2.validPassword;\n      var formValid = userType == 'civilian' ? validEmail && validPassword : validBadgenumber && validPassword;\n      return React.createElement(KeyboardAvoidingView, {\n        style: [{\n          backgroundColor: colors.background\n        }, baseStyles.wrapper],\n        behavior: \"padding\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 7\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: baseStyles.headerText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }\n      }, userType == 'civilian' ? \"Log In\" : \"Log In to your Police Account\"), userType == 'civilian' ? React.createElement(InputField, {\n        labelText: \"Email\",\n        labelTextSize: 14,\n        labelColor: colors.white,\n        textColor: colors.white,\n        borderBottomColor: colors.white,\n        inputType: \"email\",\n        customStyle: {\n          marginBottom: 30\n        },\n        onChangeText: this.handleEmailChange,\n        autoFocus: true,\n        autoCapitalize: \"none\",\n        iconName: \"envelope\",\n        showCheckmark: this.state.validEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }\n      }) : React.createElement(InputField, {\n        labelText: \"Badge Number\",\n        labelTextSize: 14,\n        labelColor: colors.white,\n        textColor: colors.white,\n        borderBottomColor: colors.white,\n        inputType: \"number\",\n        customStyle: {\n          marginBottom: 30\n        },\n        onChangeText: this.handleBadgeChange,\n        showCheckmark: this.state.validBadgenumber,\n        autoFocus: true,\n        autoCapitalize: \"none\",\n        iconName: \"envelope\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }\n      }), React.createElement(InputField, {\n        labelText: \"Password\",\n        labelTextSize: 14,\n        labelColor: colors.white,\n        textColor: colors.white,\n        borderBottomColor: colors.white,\n        inputType: \"password\",\n        customStyle: {\n          marginBottom: 30\n        },\n        onChangeText: this.handlePasswordChange,\n        showCheckmark: this.state.validPassword,\n        autoCapitalize: \"none\",\n        iconName: \"key\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }\n      }), userType == 'police' ? React.createElement(TouchableHighlight, {\n        style: styles.createAccountButtonSyle,\n        onPress: function onPress() {\n          return _this2.onCreatePoliceAccount();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.createAccountButtonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 19\n        }\n      }, \"Create a New Police Officer Account\")) : null, React.createElement(TouchableOpacity, {\n        style: baseStyles.nextButtonSyle,\n        title: \"Sign In\",\n        onPress: this.signIn,\n        disabled: !formValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: _extends({}, baseStyles.nextButtonText, {\n          color: formValid ? colors.white : colors.secondaryText\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }\n      }, \" Sign In \"), React.createElement(Icon, {\n        name: \"angle-right\",\n        color: formValid ? colors.white : colors.secondaryText,\n        size: 22,\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return LogIn;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userType: state.userType\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(ActionCreators, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);","map":{"version":3,"sources":["/Users/bryanmarin/Desktop/Traffic-Stop-App/trafficstop/src/screens/LogIn.js"],"names":["React","Component","PropTypes","Icon","Button","Input","colors","baseStyles","styles","InputField","connect","bindActionCreators","ActionCreators","Amplify","Auth","LogIn","props","signIn","state","username","password","console","log","setLoggedIn","emailAddress","badgeNumber","confirmationCode","validUsername","validBadgenumber","validPassword","handleEmailChange","bind","handleBadgeChange","handleSignInButton","handlePasswordChange","onCreatePoliceAccount","text","emailformat","setState","match","validEmail","length","validBadgeNumber","strongRegex","RegExp","navigation","navigate","userType","formValid","backgroundColor","background","wrapper","headerText","white","marginBottom","createAccountButtonSyle","createAccountButtonText","nextButtonSyle","nextButtonText","color","secondaryText","icon","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {\n  View,\n  Text,\n  ScrollView,\n  KeyboardAvoidingView,\n  Modal,\n  TouchableOpacity,\n  TouchableHighlight,\n} from 'react-native';\nimport { Button, Input } from 'react-native-elements';\nimport colors from '../styles/colors';\nimport baseStyles from './styles/AuthenticationBoilerplate';\nimport styles from './styles/LogIn';\nimport InputField from '../common-components/InputField';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as ActionCreators from '../redux/actions';\n// import transparentHeaderStyle from '../styles/navigation';\n// import NavBarButton from '../components/buttons/NavBarButton';\n//import Loader from '../components/Loader';\n\n\nimport Amplify from '@aws-amplify/core'\nimport { Auth } from 'aws-amplify';\n//import awsconfig from '../../aws-exports';\n//Amplify.configure(awsconfig);\n\nclass LogIn extends React.Component {\n  // static navigationOptions = ({ navigation }) => ({\n  //   headerTitle: \"\",\n  //   headerRight: () => <NavBarButton\n  //     handleButtonPress={() => navigation.navigate('ForgotPassword')}\n  //     location=\"right\"\n  //     color={colors.white}\n  //     text=\"Forgot Password\"\n  //   />,\n  //   headerLeft: () => <NavBarButton\n  //     handleButtonPress={() => navigation.goBack()}\n  //     location=\"left\"\n  //     icon={<Icon name=\"angle-left\" color={colors.white} size={30} />}\n  //   />,\n  //   headerStyle: transparentHeaderStyle,\n  //   headerTransparent: true,\n  //   headerTintColor: colors.white,\n  // });\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailAddress: '',\n      password: '',\n      badgeNumber: '',\n      username: '',\n      confirmationCode: '',\n      validUsername: false,\n      validBadgenumber: false,\n      validPassword: false,\n    };\n\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handleBadgeChange = this.handleBadgeChange.bind(this);\n    this.handleSignInButton = this.handleSignInButton.bind(this);\n    //this.handleConfirmationCode = this.handleConfirmationCode.bind(this)\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.onCreatePoliceAccount = this.onCreatePoliceAccount.bind(this);\n  }\n\n  signIn = async () => {\n    const {\n      username, password\n    } = this.state\n    try {\n      await Auth.signIn({ username, password})\n      console.log('successful signed in..')\n      console.log(this.props)\n      this.props.setLoggedIn(true)\n    } catch (err) {\n      console.log('error signing in...', err)\n    }\n  }\n\n  // handleConfirmationCode = () => {\n  //   const { emailAddress, confirmationCode } = this.state;\n  //   this.setState({ emailAddress: emailAddress.toLowerCase() })\n  //   Auth.confirmSignUp(emailAddress, confirmationCode, {})\n  //     .then(() => {\n  //       this.setState({ modalVisible: false });\n  //       this.props.navigation.navigate('Profile')\n  //     })\n  //     .catch(err => console.log(err));\n  // }\n\n  // async SignIn() {\n  //   const { logIn, navigation } = this.props;\n  //   const { navigate } = navigation;\n  //   const { emailAddress, password } = this.state;\n  //   this.setState({ emailAddress: emailAddress.toLowerCase() })\n  //   try {\n  //     const user = await Auth.signIn(emailAddress, password);\n  //     console.log(user)\n  //     if (user.challengeName === 'SMS_MFA' ||\n  //       user.challengeName === 'SOFTWARE_TOKEN_MFA') {\n  //       // You need to get the code from the UI inputs\n  //       // and then trigger the following function with a button click\n  //       //const code = getCodeFromUserInput();\n  //       // If MFA is enabled, sign-in should be confirmed with the confirmation code\n  //       this.setState({ modalVisible: true })\n  //     } else if (user.challengeName === 'NEW_PASSWORD_REQUIRED') {\n  //       // const {requiredAttributes} = user.challengeParam; // the array of required attributes, e.g ['email', 'phone_number']\n  //       // // You need to get the new password and required attributes from the UI inputs\n  //       // // and then trigger the following function with a button click\n  //       // // For example, the email and phone_number are required attributes\n  //       // const {emailAddress, password} = getInfoFromUserInput();\n  //       // const loggedUser = await Auth.completeNewPassword(\n  //       //     emailAddress,              // the Cognito User Object\n  //       //     newPassword,       // the new password\n  //       //     // OPTIONAL, the required attributes\n  //       //     {\n  //       //         name\n  //       //     }\n  //       // );\n  //     } else if (user.challengeName === 'MFA_SETUP') {\n  //       // This happens when the MFA method is TOTP\n  //       // The user needs to setup the TOTP before using it\n  //       // More info please check the Enabling MFA part\n  //       Auth.setupTOTP(user);\n  //     }\n  //     else {\n  //       //Auth.resendSignUp(emailAddress);\n  //       this.setState({ formValid: true, loadingVisible: false });\n  //       this.props.navigation.navigate('Profile');\n  //       // The user directly signs in\n  //       console.log(user);\n\n  //     }\n  //   } catch (err) {\n  //     console.log(err)\n  //     if (err.code === 'UserNotConfirmedException') {\n  //       // The error happens if the user didn't finish the confirmation step when signing up\n  //       // In this case you need to resend the code and confirm the user\n  //       // About how to resend the code and confirm the user, please check the signUp part\n  //       this.setState({ modalVisible: true });\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //     } else if (err.code === 'PasswordResetRequiredException') {\n  //       // The error happens when the password is reset in the Cognito console\n  //       // In this case you need to call forgotPassword to reset the password\n  //       // Please check the Forgot Password part.\n  //       Auth.forgotPassword(emailAddress);\n  //       this.props.navigation.navigate('ForgotPassword');\n  //     } else if (err.code === 'NotAuthorizedException') {\n  //       // The error happens when the incorrect password is provided\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //     } else if (err.code === 'UserNotFoundException') {\n  //       // The error happens when the supplied username/email does not exist in the Cognito user pool\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //     } else {\n  //       this.setState({ formValid: false, loadingVisible: false });\n  //       console.log(err);\n  //     }\n  //   }\n  // }\n\n  handleSignInButton() {\n    //this.setState({ loadingVisible: true });\n    // const { logIn, navigation } = this.props;\n\n    // this.SignIn();\n    // setTimeout(() => {\n    //   const { emailAddress, password } = this.state;\n    //   this.setState({ emailAddress: emailAddress.toLowerCase() })\n    //   this.SignIn\n    // }, 2000);\n    this.props.setLoggedIn(true)\n  }\n\n\n  handleEmailChange(text) {\n    var emailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    this.setState({ emailAddress: text });\n    this.setState({ username: text });\n    text.match(emailformat) ? this.setState({validEmail: true}): this.setState({validEmail: false});\n  }\n\n\n  handleBadgeChange(text) {\n    text.length>=4 ? this.setState({validBadgeNumber: true}) : this.setState({validBadgeNumber: false})\n    this.setState({ badgeNumber: text });\n  }\n\n  handlePasswordChange(text) {\n    var strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\n    text.match(strongRegex) ? this.setState({validPassword: true}): this.setState({validPassword: false});\n    this.setState({ password: text });\n  }\n\n  onCreatePoliceAccount() {\n    this.props.navigation.navigate(\"Register\")\n  }\n\n  render() {\n    const userType = this.props.userType;\n    const {validEmail, validBadgenumber, validPassword} = this.state\n    const formValid = userType == 'civilian'\n                        ? validEmail && validPassword\n                        : validBadgenumber && validPassword\n    return (\n      <KeyboardAvoidingView\n        style={[{ backgroundColor: colors.background }, baseStyles.wrapper]}\n        behavior=\"padding\"\n      >\n          <ScrollView>\n            <Text style={baseStyles.headerText}>\n              {userType == 'civilian' ? \"Log In\" : \"Log In to your Police Account\"}\n            </Text>\n            { userType == 'civilian'\n            ? <InputField\n                labelText=\"Email\"\n                labelTextSize={14}\n                labelColor={colors.white}\n                textColor={colors.white}\n                borderBottomColor={colors.white}\n                inputType=\"email\"\n                customStyle={{ marginBottom: 30 }}\n                onChangeText={this.handleEmailChange}\n                autoFocus\n                autoCapitalize={\"none\"}\n                iconName=\"envelope\"\n                showCheckmark = {this.state.validEmail}\n              />\n            : <InputField\n                labelText=\"Badge Number\"\n                labelTextSize={14}\n                labelColor={colors.white}\n                textColor={colors.white}\n                borderBottomColor={colors.white}\n                inputType=\"number\"\n                customStyle={{ marginBottom: 30 }}\n                onChangeText={this.handleBadgeChange}\n                showCheckmark = {this.state.validBadgenumber}\n                autoFocus\n                autoCapitalize={\"none\"}\n                iconName=\"envelope\"\n              />\n            }\n            <InputField\n              labelText=\"Password\"\n              labelTextSize={14}\n              labelColor={colors.white}\n              textColor={colors.white}\n              borderBottomColor={colors.white}\n              inputType=\"password\"\n              customStyle={{ marginBottom: 30 }}\n              onChangeText={this.handlePasswordChange}\n              showCheckmark = {this.state.validPassword}\n              autoCapitalize={\"none\"}\n              iconName=\"key\"\n            />\n            { userType == 'police' ?\n                <TouchableHighlight\n                style={styles.createAccountButtonSyle}\n                onPress= {() => this.onCreatePoliceAccount()}\n                >\n                  <Text style={styles.createAccountButtonText}>\n                    Create a New Police Officer Account\n                  </Text>\n              </TouchableHighlight>\n              : null\n            }\n            <TouchableOpacity \n              style = {baseStyles.nextButtonSyle}\n              title = {\"Sign In\"}\n              onPress = {this.signIn}\n              disabled = {!formValid}\n              >\n              <Text style= {\n                Object.assign({},\n                  baseStyles.nextButtonText, \n                  {color: formValid? colors.white : colors.secondaryText})}\n                > Sign In </Text>\n              <Icon\n              name=\"angle-right\"\n              color={formValid? colors.white: colors.secondaryText}\n              size={22}\n              style={styles.icon}\n              />\n            </TouchableOpacity>\n          </ScrollView>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userType: state.userType,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(ActionCreators, dispatch);\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);\n"]},"metadata":{},"sourceType":"module"}